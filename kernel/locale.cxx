module;

#include <cstddef>

export module locale;

export namespace Locale
{
    bool IsDigit(char x)
    {
        return (x == '0' || x == '1' || x == '2' || x == '3' || x == '4' || x == '5' || x == '6' || x == '7' || x == '8' || x == '9');
    }

    char ToUpper(char x)
    {
        return x == 'a' ? 'A' : x == 'g' ? 'G'
                            : x == 'm'   ? 'M'
                            : x == 's'   ? 'S'
                            : x == 'b'   ? 'B'
                            : x == 'h'   ? 'H'
                            : x == 'n'   ? 'N'
                            : x == 't'   ? 'T'
                            : x == 'c'   ? 'C'
                            : x == 'i'   ? 'I'
                            : x == 'o'   ? 'O'
                            : x == 'u'   ? 'U'
                            : x == 'd'   ? 'D'
                            : x == 'j'   ? 'J'
                            : x == 'p'   ? 'P'
                            : x == 'v'   ? 'V'
                            : x == 'e'   ? 'E'
                            : x == 'k'   ? 'K'
                            : x == 'q'   ? 'Q'
                            : x == 'w'   ? 'W'
                            : x == 'f'   ? 'F'
                            : x == 'l'   ? 'L'
                            : x == 'r'   ? 'R'
                            : x == 'x'   ? 'X'
                            : x == 'y'   ? 'Y'
                            : x == 'z'   ? 'Z'
                                        : x;
    }

    char ToLower(char x)
    {
        return x == 'A' ? 'a' : x == 'G' ? 'g'
                            : x == 'M'   ? 'm'
                            : x == 'S'   ? 's'
                            : x == 'B'   ? 'b'
                            : x == 'H'   ? 'h'
                            : x == 'N'   ? 'n'
                            : x == 'T'   ? 't'
                            : x == 'C'   ? 'c'
                            : x == 'I'   ? 'i'
                            : x == 'O'   ? 'o'
                            : x == 'U'   ? 'u'
                            : x == 'D'   ? 'd'
                            : x == 'J'   ? 'j'
                            : x == 'P'   ? 'p'
                            : x == 'V'   ? 'v'
                            : x == 'E'   ? 'e'
                            : x == 'K'   ? 'k'
                            : x == 'Q'   ? 'q'
                            : x == 'W'   ? 'w'
                            : x == 'F'   ? 'f'
                            : x == 'L'   ? 'l'
                            : x == 'R'   ? 'r'
                            : x == 'X'   ? 'x'
                            : x == 'Y'   ? 'y'
                            : x == 'Z'   ? 'z'
                                        : x;
    }

    bool IsXDigit(char x)
    {
        x = ToUpper(x);
        return IsDigit(x) || x == 'A' || x == 'B' || x == 'C' || x == 'D' || x == 'E' || x == 'F';
    }

    char ToChar(int d)
    {
        return d == 0 ? '0' : d == 1 ? '1'
                        : d == 2   ? '2'
                        : d == 3   ? '3'
                        : d == 4   ? '4'
                        : d == 5   ? '5'
                        : d == 6   ? '6'
                        : d == 7   ? '7'
                        : d == 8   ? '8'
                        : d == 9   ? '9'
                        : d == 10  ? 'A'
                        : d == 11  ? 'B'
                        : d == 12  ? 'C'
                        : d == 13  ? 'D'
                        : d == 14  ? 'E'
                        : d == 15  ? 'F'
                                    : '.';
    }

    enum Charset
    {
        NATIVE,
        EBCDIC_1047,
        ASCII,
        UTF8,
    };

    consteval Locale::Charset GetNativeCharset()
    {
        if constexpr ('A' == 65)
            return Locale::Charset::ASCII;
        return Locale::Charset::EBCDIC_1047;
    }

    template <Locale::Charset S, Locale::Charset D>
    constexpr char Convert(char ch)
    {
        const unsigned char asc2ebc[] = {
            0x00, 0x01, 0x02, 0x03, 0x1A, 0x09, 0x1A, 0x7F,
            0x1A, 0x1A, 0x1A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
            0x10, 0x11, 0x12, 0x13, 0x3C, 0x3D, 0x32, 0x26,
            0x18, 0x19, 0x3F, 0x27, 0x1C, 0x1D, 0x1E, 0x1F,
            0x40, 0x4F, 0x7F, 0x7B, 0x5B, 0x6C, 0x50, 0x7D,
            0x4D, 0x5D, 0x5C, 0x4E, 0x6B, 0x60, 0x4B, 0x61,
            0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7,
            0xF8, 0xF9, 0x7A, 0x5E, 0x4C, 0x7E, 0x6E, 0x6F,
            0x7C, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7,
            0xC8, 0xC9, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6,
            0xD7, 0xD8, 0xD9, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6,
            0xE7, 0xE8, 0xE9, 0x4A, 0xE0, 0x5A, 0x5F, 0x6D,
            0x79, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
            0x88, 0x89, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96,
            0x97, 0x98, 0x99, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6,
            0xA7, 0xA8, 0xA9, 0xC0, 0x6A, 0xD0, 0xA1, 0x07,
            0x20, 0x21, 0x22, 0x23, 0x04, 0x14, 0x06, 0x17,
            0x08, 0x09, 0x0A, 0x1B, 0x2C, 0x80, 0x3E, 0x1A,
            0x30, 0x31, 0x24, 0x33, 0x34, 0x35, 0x36, 0x28,
            0x38, 0x39, 0x3A, 0x3B, 0x29, 0x2A, 0x2B, 0x15,
            0xA0, 0xE1, 0x8E, 0x8F, 0x9A, 0x9B, 0x9C, 0x9D,
            0x9E, 0x9F, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF,
            0xB0, 0xB1, 0xB2, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7,
            0xB8, 0xB9, 0xBA, 0xBB, 0xBC, 0xBD, 0xBE, 0xBF,
            0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77,
            0xAC, 0x69, 0xED, 0xEE, 0xEB, 0xEF, 0xEC, 0xBF,
            0x80, 0xFD, 0xFE, 0xFB, 0xFC, 0xAD, 0xAE, 0x59,
            0x44, 0x45, 0x42, 0x46, 0x43, 0x47, 0x9C, 0x48,
            0x54, 0x51, 0x52, 0x53, 0x58, 0x55, 0x56, 0x57,
            0x8C, 0x49, 0xCD, 0xCE, 0xCB, 0xCF, 0xCC, 0xE1,
            0x70, 0xDD, 0xDE, 0xDB, 0xDC, 0x8D, 0x8E, 0xDF};

        const unsigned char ebc2asc[] = {
            0x00, 0x01, 0x02, 0x03, 0x1A, 0x09, 0x1A, 0x7F,
            0x1A, 0x1A, 0x1A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
            0x10, 0x11, 0x12, 0x13, 0x1A, 0x1A, 0x08, 0x1A,
            0x18, 0x19, 0x1A, 0x1A, 0x1C, 0x1D, 0x1E, 0x1F,
            0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x0A, 0x17, 0x1B,
            0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x05, 0x06, 0x07,
            0x1A, 0x1A, 0x16, 0x1A, 0x1A, 0x1A, 0x1A, 0x04,
            0x1A, 0x1A, 0x1A, 0x1A, 0x14, 0x15, 0x1A, 0x1A,
            0x20, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
            0x1A, 0x1A, 0x5B, 0x2E, 0x3C, 0x28, 0x2B, 0x21,
            0x26, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
            0x1A, 0x1A, 0x5D, 0x24, 0x2A, 0x29, 0x3B, 0x5E,
            0x2D, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
            0x1A, 0x1A, 0x7C, 0x2C, 0x25, 0x5F, 0x3E, 0x3F,
            0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
            0x1A, 0x60, 0x3A, 0x23, 0x40, 0x27, 0x3D, 0x22,
            0x1A, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67,
            0x68, 0x69, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
            0x1A, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70,
            0x71, 0x72, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
            0x1A, 0x7E, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78,
            0x79, 0x7A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
            0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
            0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
            0x7B, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47,
            0x48, 0x49, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
            0x7D, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50,
            0x51, 0x52, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
            0x5C, 0x1A, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58,
            0x59, 0x5A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A,
            0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37,
            0x38, 0x39, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A, 0x1A};

        constexpr Locale::Charset src_cset = S == Locale::Charset::NATIVE ? Locale::GetNativeCharset() : S;
        constexpr Locale::Charset dst_cset = D == Locale::Charset::NATIVE ? Locale::GetNativeCharset() : D;
        if constexpr (src_cset == dst_cset) // Same Locale::Charset returns same character
            return ch;

        if constexpr (src_cset == Locale::Charset::ASCII)
        {
            if constexpr (dst_cset == Locale::Charset::EBCDIC_1047)
                return asc2ebc[ch & 0xFF];
        }
        else if constexpr (src_cset == Locale::Charset::EBCDIC_1047)
        {
            if constexpr (dst_cset == Locale::Charset::ASCII)
                return ebc2asc[ch & 0xFF];
        }
    }

    template <Locale::Charset S, Locale::Charset D>
    constexpr void Convert(char *str)
    {
        while (*str++)
            *str = Locale::Convert<S, D>(*str);
    }

    template <Locale::Charset S, Locale::Charset D>
    constexpr void Convert(char *str, size_t n)
    {
        while (*str++ && n--)
            *str = Locale::Convert<S, D>(*str);
    }
}
